/**
 * Registers an `eventHandler` for the given `eventName`.
 *
 * @returns Returns a function for deregistering the `eventHandler`.
 * @category Events
 */
export declare function on(eventName: string, eventHandler: (...args: Array<any>) => void): () => void;
/**
 * Registers an `eventHandler` that will run at most once for the given
 * `eventName`.
 *
 * @returns Returns a function for deregistering the `eventHandler`.
 * @category Events
 */
export declare function once(eventName: string, eventHandler: (...args: Array<any>) => void): () => void;
/**
 * Calling `emit` in the main context invokes the event handler for the
 * matching `eventName` in your UI. Correspondingly, calling `emit` in your
 * UI invokes the event handler for the matching `eventName` in the main
 * context.
 *
 * All `args` passed after `eventName` will be directly applied on the
 * event handler.
 *
 * @category Events
 */
export declare const emit: (eventName: string, ...args: Array<any>) => void;
//# sourceMappingURL=events.d.ts.map