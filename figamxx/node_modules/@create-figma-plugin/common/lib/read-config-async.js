"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfigAsync = void 0;
const slugify = require("@sindresorhus/slugify");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const constants_1 = require("./constants");
const defaultConfig = {
    apiVersion: constants_1.constants.apiVersion,
    commandId: 'main.ts--default',
    id: constants_1.constants.packageJson.defaultPluginName,
    main: { handler: 'default', src: 'main.ts' },
    menu: null,
    name: constants_1.constants.packageJson.defaultPluginName,
    relaunchButtons: null,
    ui: null
};
async function readConfigAsync() {
    const packageJsonPath = path_1.join(process.cwd(), 'package.json');
    if ((await fs_extra_1.pathExists(packageJsonPath)) === false) {
        return defaultConfig;
    }
    const packageJson = require(packageJsonPath);
    const config = packageJson[constants_1.constants.packageJson.configKey];
    if (typeof config === 'undefined' || Object.keys(config).length === 0) {
        return defaultConfig;
    }
    const { apiVersion, id, name, main, ui, menu, relaunchButtons } = config;
    return {
        apiVersion: typeof apiVersion === 'undefined' ? constants_1.constants.apiVersion : apiVersion,
        id: typeof id === 'undefined' ? slugify(name) : id,
        ...parseCommand({ main, menu, name, ui }),
        relaunchButtons: typeof relaunchButtons === 'undefined'
            ? null
            : parseRelaunchButtons(relaunchButtons)
    };
}
exports.readConfigAsync = readConfigAsync;
function parseCommand(command) {
    const { name, main, ui, menu } = command;
    return {
        commandId: typeof main === 'undefined' ? null : parseCommandId(main),
        main: typeof main === 'undefined' ? null : parseFile(main),
        menu: typeof menu === 'undefined'
            ? null
            : menu.map(function (command) {
                if (command === '-') {
                    return { separator: true };
                }
                return parseCommand(command);
            }),
        name,
        ui: typeof ui === 'undefined' ? null : parseFile(ui)
    };
}
function parseRelaunchButtons(relaunchButtons) {
    const result = [];
    for (const commandId in relaunchButtons) {
        const { name, main, ui, multipleSelection } = relaunchButtons[commandId];
        if (typeof main === 'undefined') {
            throw new Error(`Need a "main" for relaunch button: ${name}`);
        }
        result.push({
            commandId,
            main: parseFile(main),
            multipleSelection: typeof multipleSelection === 'undefined' ? false : multipleSelection,
            name,
            ui: typeof ui === 'undefined' ? null : parseFile(ui)
        });
    }
    return result;
}
function parseCommandId(main) {
    if (typeof main === 'string') {
        return `${main}--default`;
    }
    const { src, handler } = main;
    if (typeof handler === 'undefined') {
        return `${src}--default`;
    }
    return `${src}--${handler}`;
}
function parseFile(file) {
    if (typeof file === 'string') {
        return {
            handler: 'default',
            src: file
        };
    }
    const { src, handler } = file;
    if (typeof handler === 'undefined') {
        return {
            handler: 'default',
            src
        };
    }
    return { handler, src };
}
//# sourceMappingURL=read-config-async.js.map