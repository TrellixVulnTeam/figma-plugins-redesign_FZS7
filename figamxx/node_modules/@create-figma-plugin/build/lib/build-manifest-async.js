"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildManifestAsync = void 0;
const common_1 = require("@create-figma-plugin/common");
const fs_extra_1 = require("fs-extra");
async function buildManifestAsync(config) {
    const { name, commandId, main, ui, menu, relaunchButtons } = config;
    const command = { commandId, main, menu, name, ui };
    if (hasBundle(command, 'main') === false) {
        throw new Error('Need a "main"');
    }
    const result = {
        api: config.apiVersion,
        id: config.id,
        main: common_1.constants.build.pluginCodeFilePath,
        name: config.name
    };
    if (hasBundle(command, 'ui') === true) {
        result.ui = common_1.constants.build.pluginUiFilePath;
    }
    else {
        if (relaunchButtons !== null) {
            const relaunchButtonsWithUi = relaunchButtons.filter(function (relaunchButton) {
                return relaunchButton.ui !== null;
            });
            if (relaunchButtonsWithUi.length > 0) {
                result.ui = common_1.constants.build.pluginUiFilePath;
            }
        }
    }
    if (menu !== null) {
        result.menu = createMenu(menu);
    }
    if (relaunchButtons !== null) {
        result.relaunchButtons = createRelaunchButtons(relaunchButtons);
    }
    const string = JSON.stringify(result) + '\n';
    await fs_extra_1.outputFile(common_1.constants.build.manifestFilePath, string);
}
exports.buildManifestAsync = buildManifestAsync;
function hasBundle(command, key) {
    if (command[key] !== null) {
        return true;
    }
    if (command.menu !== null) {
        const result = command.menu.filter(function (command) {
            if ('separator' in command) {
                return false;
            }
            return hasBundle(command, key);
        });
        return result.length > 0;
    }
    return false;
}
function createMenu(menu) {
    return menu.map(function (item) {
        if ('separator' in item) {
            return { separator: true };
        }
        const result = {
            name: item.name
        };
        if (item.commandId !== null) {
            result.command = item.commandId;
        }
        if (item.menu !== null) {
            result.menu = createMenu(item.menu);
        }
        return result;
    });
}
function createRelaunchButtons(relaunchButtons) {
    return relaunchButtons.map(function (relaunchButton) {
        const result = {
            command: relaunchButton.commandId,
            name: relaunchButton.name
        };
        if (relaunchButton.multipleSelection === true) {
            result.multipleSelection = true;
        }
        return result;
    });
}
//# sourceMappingURL=build-manifest-async.js.map