"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildBundleAsync = void 0;
const common_1 = require("@create-figma-plugin/common");
const findUp = require("find-up");
const path_1 = require("path");
const tempWrite = require("temp-write");
const webpack = require("webpack");
const create_webpack_config_1 = require("./create-webpack-config");
async function buildBundleAsync(config, isDevelopment) {
    const entry = {};
    const { name, commandId, main, ui, menu, relaunchButtons } = config;
    const command = { commandId, main, menu, name, ui };
    const mainEntryFile = await createMainEntryFileAsync(command, relaunchButtons);
    if (mainEntryFile !== null) {
        const key = extractBasename(common_1.constants.build.pluginCodeFilePath);
        entry[key] = mainEntryFile;
    }
    const uiEntryFile = await createUiEntryFileAsync(command, relaunchButtons);
    if (uiEntryFile !== null) {
        const key = extractBasename(common_1.constants.build.pluginUiFilePath);
        entry[key] = uiEntryFile;
    }
    let webpackConfig = create_webpack_config_1.createWebpackConfig(entry, isDevelopment);
    const customWebpackConfigPath = await findUp(common_1.constants.build.webpackConfigFileName);
    if (typeof customWebpackConfigPath !== 'undefined') {
        webpackConfig = require(customWebpackConfigPath)(webpackConfig);
    }
    return new Promise(function (resolve, reject) {
        webpack(webpackConfig, function (error, stats) {
            if (stats.hasErrors() === true) {
                reject(stats.toJson().errors.join('\n'));
                return;
            }
            if (error) {
                reject(error);
                return;
            }
            resolve();
        });
    });
}
exports.buildBundleAsync = buildBundleAsync;
async function createMainEntryFileAsync(command, relaunchButtons) {
    const modules = [];
    extractModule(command, 'main', modules);
    if (modules.length === 0) {
        return null;
    }
    if (relaunchButtons !== null) {
        extractModules(relaunchButtons, 'main', modules);
    }
    const fileContent = `
    require('@create-figma-plugin/utilities/lib/events');
    const modules = ${createRequireCode(modules)};
    const commandId = (figma.command === '' || ${modules.length === 1}) ? '${modules[0].commandId}' : figma.command;
    modules[commandId]();
  `;
    return tempWrite(fileContent);
}
async function createUiEntryFileAsync(command, relaunchButtons) {
    const modules = [];
    extractModule(command, 'ui', modules);
    if (relaunchButtons !== null) {
        extractModules(relaunchButtons, 'ui', modules);
    }
    if (modules.length === 0) {
        return null;
    }
    const fileContent = `
    require('@create-figma-plugin/utilities/lib/events');
    const rootNode = document.getElementById('create-figma-plugin');
    const modules = ${createRequireCode(modules)};
    const commandId = __FIGMA_COMMAND__ === '' ? '${modules[0].commandId}' : __FIGMA_COMMAND__;
    if (typeof modules[commandId] === 'undefined') {
      throw new Error(
        'UI not defined for the command corresponding to ' + commandId
      );
    }
    modules[commandId](rootNode, __SHOW_UI_DATA__);
  `;
    return tempWrite(fileContent);
}
function extractModules(items, key, result) {
    for (const item of items) {
        if ('separator' in item) {
            continue;
        }
        extractModule(item, key, result);
    }
}
function extractModule(command, key, result) {
    const commandId = command.commandId;
    if (commandId !== null) {
        const item = command[key];
        if (item !== null) {
            const { src, handler } = item;
            result.push({
                commandId,
                handler,
                src
            });
        }
    }
    if ('menu' in command && command.menu !== null) {
        extractModules(command.menu, key, result);
    }
}
function createRequireCode(entryFiles) {
    const code = [];
    for (const entryFile of entryFiles) {
        code.push(`'${entryFile.commandId}':require('${entryFile.src}')['${entryFile.handler}']`);
    }
    return `{${code.join(',')}}`;
}
function extractBasename(filename) {
    const extension = path_1.extname(filename);
    return path_1.basename(filename, extension);
}
//# sourceMappingURL=build-bundle-async.js.map