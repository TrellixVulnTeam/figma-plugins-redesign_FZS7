"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWebpackConfig = void 0;
const common_1 = require("@create-figma-plugin/common");
const path_1 = require("path");
const TerserPlugin = require("terser-webpack-plugin");
const webpack = require("webpack");
const babelLoader = {
    loader: 'babel-loader',
    options: {
        plugins: [
            '@babel/plugin-proposal-object-rest-spread',
            [
                '@babel/plugin-transform-template-literals',
                {
                    loose: true
                }
            ],
            [
                '@babel/plugin-transform-react-jsx',
                {
                    pragma: 'h',
                    pragmaFrag: 'Fragment'
                }
            ]
        ]
    }
};
function createWebpackConfig(entry, isDevelopment) {
    const mode = isDevelopment ? 'development' : 'production';
    return {
        devtool: isDevelopment ? 'inline-cheap-module-source-map' : false,
        entry,
        mode,
        module: {
            rules: [
                {
                    test: /\.jsx?$/,
                    use: babelLoader
                },
                {
                    test: /\.tsx?$/,
                    use: [
                        babelLoader,
                        {
                            loader: 'ts-loader'
                        }
                    ]
                },
                {
                    test: /\.s?css$/,
                    use: [
                        {
                            loader: 'style-loader',
                            options: {
                                injectType: 'styleTag'
                            }
                        },
                        {
                            loader: 'css-loader',
                            options: {
                                importLoaders: 1,
                                modules: true
                            }
                        },
                        {
                            loader: 'sass-loader'
                        }
                    ]
                }
            ]
        },
        optimization: {
            minimizer: [
                new TerserPlugin({
                    extractComments: false,
                    terserOptions: {
                        output: {
                            comments: false
                        }
                    }
                })
            ]
        },
        output: {
            filename: '[name].js',
            path: path_1.join(process.cwd(), common_1.constants.build.directoryName)
        },
        plugins: [
            new webpack.EnvironmentPlugin({
                NODE_ENV: mode
            })
        ],
        resolve: {
            extensions: ['.js', '.jsx', '.json', '.ts', '.tsx'],
            modules: [
                path_1.join(process.cwd(), common_1.constants.src.directory),
                path_1.join(process.cwd(), 'node_modules'),
                path_1.resolve(process.cwd(), '..', '..', 'node_modules'),
                process.cwd(),
                'node_modules'
            ]
        },
        stats: 'errors-only'
    };
}
exports.createWebpackConfig = createWebpackConfig;
//# sourceMappingURL=create-webpack-config.js.map