/** @jsx h */
import classnames from '@sindresorhus/class-names';
import { h } from 'preact';
import { useCallback, useRef } from 'preact/hooks';
import { ESCAPE_KEY_CODE } from '../../utilities/key-codes';
import styles from './textbox.scss';
export function Textbox({ disabled, focused, icon, name, noBorder, onChange, placeholder, propagateEscapeKeyDown = true, type = 'text', value, ...rest }) {
    const hasIcon = typeof icon !== 'undefined';
    const inputElementRef = useRef(null);
    const handleClick = useCallback(function () {
        if (inputElementRef.current === null ||
            typeof inputElementRef.current === 'undefined') {
            return;
        }
        if (value === null) {
            inputElementRef.current.focus();
            inputElementRef.current.select();
        }
    }, [value]);
    function handleFocus() {
        if (inputElementRef.current === null ||
            typeof inputElementRef.current === 'undefined') {
            return;
        }
        inputElementRef.current.select();
    }
    const handleInput = useCallback(function (event) {
        if (inputElementRef.current === null ||
            typeof inputElementRef.current === 'undefined') {
            return;
        }
        const newValue = inputElementRef.current.value;
        onChange({ [name]: newValue }, newValue, name, event);
    }, [name, onChange]);
    function handleKeyDown(event) {
        const keyCode = event.keyCode;
        if (keyCode === ESCAPE_KEY_CODE) {
            if (propagateEscapeKeyDown === false) {
                event.stopPropagation();
            }
            if (inputElementRef.current === null ||
                typeof inputElementRef.current === 'undefined') {
                return;
            }
            inputElementRef.current.blur();
        }
    }
    return (h("div", { class: classnames(styles.textbox, noBorder === true ? styles.noBorder : null, hasIcon === true ? styles.hasIcon : null) },
        h("input", Object.assign({}, rest, { ref: inputElementRef, class: styles.input, "data-initial-focus": focused === true, disabled: disabled === true, name: name, onClick: handleClick, onFocus: handleFocus, onInput: handleInput, onKeyDown: handleKeyDown, placeholder: placeholder, tabIndex: disabled === true ? undefined : 0, type: type, value: value === null ? 'Mixed' : value })),
        hasIcon ? h("div", { class: styles.icon }, icon) : null));
}
//# sourceMappingURL=textbox.js.map