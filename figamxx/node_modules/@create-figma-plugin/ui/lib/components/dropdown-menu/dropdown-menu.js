/** @jsx h */
import classnames from '@sindresorhus/class-names';
import { cloneElement, h } from 'preact';
import { useCallback, useLayoutEffect, useRef, useState } from 'preact/hooks';
import { INVALID_MENU_ITEM_ID, useScrollableMenu } from '../../hooks/use-scrollable-menu';
import { ENTER_KEY_CODE, ESCAPE_KEY_CODE } from '../../utilities/key-codes';
import { checkIcon } from '../icon/icons/check-icon';
import styles from './dropdown-menu.scss';
const ITEM_ELEMENT_ATTRIBUTE_NAME = 'data-dropdown-menu';
export function DropdownMenu({ children, focused, fullWidth, name, onChange, options, right, top, value }) {
    const rootElementRef = useRef(null);
    const [isMenuVisible, setIsMenuVisible] = useState(false);
    const menuItems = options.map(function (option, index) {
        return {
            id: `${index}`,
            ...option
        };
    });
    const committedId = getIdByValue(menuItems, value);
    const [selectedId, setSelectedId] = useState(committedId);
    const findOptionById = useCallback(function (targetId) {
        const result = menuItems.find(function ({ id }) {
            return id === targetId;
        });
        return typeof result === 'undefined' ? null : result;
    }, [menuItems]);
    const handleMenuItemClick = useCallback(function (event) {
        const targetId = event.target.getAttribute(ITEM_ELEMENT_ATTRIBUTE_NAME);
        const option = findOptionById(targetId);
        if (option === null) {
            return;
        }
        if ('value' in option) {
            const newValue = option.value;
            onChange({ [name]: newValue }, newValue, name, event);
            setIsMenuVisible(false);
        }
    }, [findOptionById, name, onChange, setIsMenuVisible]);
    const { menuElementRef, handleKeyDown, updateScrollPosition } = useScrollableMenu({
        changeOnMouseOver: true,
        itemElementAttributeName: ITEM_ELEMENT_ATTRIBUTE_NAME,
        onChange: setSelectedId,
        selectedItemId: selectedId
    });
    const handleClick = useCallback(function (event) {
        if (menuElementRef.current === null ||
            typeof menuElementRef.current === 'undefined' ||
            rootElementRef.current === null ||
            typeof rootElementRef.current === 'undefined' ||
            menuElementRef.current === event.target ||
            menuElementRef.current.contains(event.target) === true) {
            return;
        }
        if (rootElementRef.current === event.target ||
            rootElementRef.current.contains(event.target) === true) {
            setIsMenuVisible(!(isMenuVisible === true));
            updateScrollPosition(`${selectedId}`);
        }
    }, [
        isMenuVisible,
        menuElementRef,
        selectedId,
        setIsMenuVisible,
        updateScrollPosition
    ]);
    const handleRootElementKeyDown = useCallback(
    // Commit the selected value and hide the menu if `Enter` was pressed
    function (event) {
        if (event.keyCode === ENTER_KEY_CODE) {
            if (selectedId !== INVALID_MENU_ITEM_ID) {
                setSelectedId(selectedId);
                const option = findOptionById(selectedId);
                if (option === null) {
                    return;
                }
                if ('value' in option) {
                    const newValue = option.value;
                    onChange({ [name]: newValue }, newValue, name, event);
                }
            }
            setIsMenuVisible(false);
            return;
        }
        // Hide the menu if `Esc` was pressed
        if (event.keyCode === ESCAPE_KEY_CODE) {
            setIsMenuVisible(false);
            return;
        }
        handleKeyDown(event);
    }, [
        findOptionById,
        handleKeyDown,
        name,
        onChange,
        selectedId,
        setIsMenuVisible,
        setSelectedId
    ]);
    const handleWindowClick = useCallback(
    // Hide the menu if weâ€™d clicked outside
    function (event) {
        if (rootElementRef.current === null ||
            typeof rootElementRef.current === 'undefined') {
            return;
        }
        if (isMenuVisible === false ||
            rootElementRef.current === event.target ||
            rootElementRef.current.contains(event.target)) {
            return;
        }
        setIsMenuVisible(false);
    }, [rootElementRef, isMenuVisible, setIsMenuVisible]);
    useLayoutEffect(function () {
        window.addEventListener('click', handleWindowClick);
        return function () {
            window.removeEventListener('click', handleWindowClick);
        };
    }, [handleWindowClick]);
    return (h("div", { ref: rootElementRef, class: styles.dropdownMenu, "data-initial-focus": focused === true, onClick: handleClick, onKeyDown: handleRootElementKeyDown, tabIndex: 0 },
        cloneElement(children, { [name]: value }),
        h("div", { class: classnames(styles.menu, isMenuVisible === false ? styles.hidden : null, fullWidth === true ? styles.fullWidth : null, right === true ? styles.right : null, top === true ? styles.top : null) },
            h("div", { ref: menuElementRef }, menuItems.map(function (menuItem) {
                if ('separator' in menuItem) {
                    return h("hr", { key: menuItem.id, class: styles.menuSeparator });
                }
                if ('header' in menuItem) {
                    return (h("h1", { key: menuItem.id, class: styles.menuHeader }, menuItem.header));
                }
                return (h("div", Object.assign({ key: menuItem.id, class: classnames(styles.menuItem, `${menuItem.id}` === selectedId
                        ? styles.menuItemSelected
                        : null), onClick: handleMenuItemClick }, { [ITEM_ELEMENT_ATTRIBUTE_NAME]: menuItem.id }),
                    menuItem.id === committedId ? (h("div", { class: styles.icon }, checkIcon)) : null,
                    menuItem.value));
            })))));
}
function getIdByValue(menuItems, targetValue) {
    if (targetValue !== null) {
        for (const menuItem of menuItems) {
            if ('value' in menuItem) {
                const { id, value } = menuItem;
                if (value === targetValue) {
                    return typeof id === 'undefined' ? null : id;
                }
            }
        }
    }
    return INVALID_MENU_ITEM_ID;
}
//# sourceMappingURL=dropdown-menu.js.map