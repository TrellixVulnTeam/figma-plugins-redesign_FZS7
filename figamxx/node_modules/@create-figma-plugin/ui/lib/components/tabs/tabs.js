/** @jsx h */
import { h } from 'preact';
import { useCallback } from 'preact/hooks';
import { DOWN_KEY_CODE, ESCAPE_KEY_CODE, LEFT_KEY_CODE, RIGHT_KEY_CODE, UP_KEY_CODE } from '../../utilities/key-codes';
import styles from './tabs.scss';
export function Tabs({ focused, name, onChange, options, propagateEscapeKeyDown = true, value, ...rest }) {
    const handleChange = useCallback(function (event) {
        const index = event.target.getAttribute('data-index');
        if (index === null) {
            return;
        }
        const newValue = options[parseInt(index)].value;
        onChange({ [name]: newValue }, newValue, name, event);
    }, [name, onChange, options]);
    const handleKeyDown = useCallback(function (event) {
        const keyCode = event.keyCode;
        if (keyCode === ESCAPE_KEY_CODE) {
            if (propagateEscapeKeyDown === false) {
                event.stopPropagation();
            }
            ;
            event.target.blur();
            return;
        }
        if (keyCode === DOWN_KEY_CODE ||
            keyCode === LEFT_KEY_CODE ||
            keyCode === RIGHT_KEY_CODE ||
            keyCode === UP_KEY_CODE) {
            if (value === null) {
                const newValue = options[0].value;
                onChange({ [name]: newValue }, newValue, name, event);
                return;
            }
            const currentIndex = options.findIndex(function (option) {
                return option.value === value;
            });
            let nextIndex = currentIndex +
                (keyCode === LEFT_KEY_CODE || keyCode === UP_KEY_CODE ? -1 : 1);
            if (nextIndex === -1) {
                nextIndex = options.length - 1;
            }
            if (nextIndex === options.length) {
                nextIndex = 0;
            }
            const newValue = options[nextIndex].value;
            onChange({ [name]: newValue }, newValue, name, event);
        }
    }, [name, onChange, options, propagateEscapeKeyDown, value]);
    const activeOption = options.find(function (option) {
        return option.value === value;
    });
    return (h("div", null,
        h("div", { class: styles.tabs, "data-initial-focus": focused === true, onKeyDown: handleKeyDown, tabIndex: 0 }, options.map(function (option, index) {
            const text = typeof option.text === 'undefined' ? option.value : option.text;
            return (h("label", { key: index, class: styles.label },
                h("input", Object.assign({}, rest, { checked: value === option.value, class: styles.input, "data-index": index, name: name, onChange: handleChange, tabIndex: -1, type: "radio", value: option.value === null ? undefined : option.value })),
                h("div", { class: styles.text, "data-text": text }, text)));
        })),
        typeof activeOption === 'undefined' ? null : activeOption.view));
}
//# sourceMappingURL=tabs.js.map