/** @jsx h */
import classnames from '@sindresorhus/class-names';
import { h } from 'preact';
import { useCallback } from 'preact/hooks';
import { ESCAPE_KEY_CODE } from '../../utilities/key-codes';
import { Stack } from '../stack/stack';
import styles from './radio-buttons.scss';
export function RadioButtons({ disabled, focused, name, onChange, options, propagateEscapeKeyDown = true, space = 'small', value, ...rest }) {
    const handleKeyDown = useCallback(function (event) {
        const keyCode = event.keyCode;
        if (keyCode === ESCAPE_KEY_CODE) {
            if (propagateEscapeKeyDown === false) {
                event.stopPropagation();
            }
            ;
            event.target.blur();
        }
    }, [propagateEscapeKeyDown]);
    const handleChange = useCallback(function (event) {
        const index = event.target.getAttribute('data-index');
        if (index === null) {
            return;
        }
        const newValue = options[parseInt(index)].value;
        onChange({ [name]: newValue }, newValue, name, event);
    }, [name, onChange, options]);
    return (h(Stack, Object.assign({ space: space }, { onKeyDown: handleKeyDown }), options.map(function (option, index) {
        const text = typeof option.text === 'undefined' ? option.value : option.text;
        const isOptionDisabled = disabled === true || option.disabled === true;
        return (h("label", { key: index, class: classnames(styles.label, isOptionDisabled === true ? styles.disabled : null) },
            h("input", Object.assign({}, rest, { checked: value === option.value, class: styles.input, "data-index": index, "data-initial-focus": focused === true, disabled: isOptionDisabled === true, name: name, onChange: handleChange, tabIndex: isOptionDisabled === true ? undefined : 0, type: "radio", value: option.value === null ? undefined : option.value })),
            h("div", { class: styles.text }, text)));
    })));
}
//# sourceMappingURL=radio-buttons.js.map