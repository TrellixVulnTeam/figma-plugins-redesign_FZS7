/** @jsx h */
import classnames from '@sindresorhus/class-names';
import { h } from 'preact';
import { useCallback, useState } from 'preact/hooks';
import { ESCAPE_KEY_CODE } from '../../utilities/key-codes';
import styles from './file-upload-dropzone.scss';
export function FileUploadDropzone({ acceptedFileTypes, children, multiple, onSelectedFiles, propagateEscapeKeyDown = true, ...rest }) {
    const [isDropActive, setIsDropActive] = useState(false);
    const filterFiles = useCallback(function (files) {
        const result = Array.prototype.slice.call(files).sort(comparator);
        if (typeof acceptedFileTypes === 'undefined') {
            return result;
        }
        return result.filter(function (file) {
            return acceptedFileTypes.indexOf(file.type) !== -1;
        });
    }, [acceptedFileTypes]);
    const handleBlur = useCallback(function () {
        setIsDropActive(false);
    }, []);
    const handleChange = useCallback(function (event) {
        const files = event.target.files;
        if (files === null) {
            return;
        }
        onSelectedFiles(filterFiles(files), event);
    }, [filterFiles, onSelectedFiles]);
    const handleDragEnter = useCallback(function (event) {
        event.preventDefault();
    }, []);
    const handleDragOver = useCallback(function (event) {
        event.preventDefault();
        setIsDropActive(true);
    }, []);
    const handleDragEnd = useCallback(function (event) {
        event.preventDefault();
        setIsDropActive(false);
    }, []);
    const handleDrop = useCallback(function (event) {
        event.preventDefault();
        if (event.dataTransfer === null) {
            return;
        }
        const files = filterFiles(event.dataTransfer.files);
        onSelectedFiles(files, event);
        setIsDropActive(false);
    }, [filterFiles, onSelectedFiles]);
    const handleKeyDown = useCallback(function (event) {
        const keyCode = event.keyCode;
        if (keyCode === ESCAPE_KEY_CODE) {
            if (propagateEscapeKeyDown === false) {
                event.stopPropagation();
            }
            ;
            event.target.blur();
        }
    }, [propagateEscapeKeyDown]);
    const accept = typeof acceptedFileTypes !== 'undefined'
        ? acceptedFileTypes.join(',')
        : undefined;
    return (h("div", { class: classnames(styles.fileUploadDropzone, isDropActive === true ? styles.isDropActive : null) },
        h("input", Object.assign({}, rest, { accept: accept, class: styles.input, multiple: multiple, onBlur: handleBlur, onChange: handleChange, onDragEnd: handleDragEnd, onDragEnter: handleDragEnter, onDragOver: handleDragOver, onDrop: handleDrop, onKeyDown: handleKeyDown, tabIndex: -1, title: "", type: "file" })),
        h("div", { class: styles.dashedLine }),
        h("div", { class: styles.children }, children)));
}
function comparator(a, b) {
    const aName = a.name.toLowerCase();
    const bName = b.name.toLowerCase();
    if (aName !== bName) {
        return aName.localeCompare(bName);
    }
    return a.lastModified - b.lastModified;
}
//# sourceMappingURL=file-upload-dropzone.js.map